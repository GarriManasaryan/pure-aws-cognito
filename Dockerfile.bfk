# Stage 1: Build frontend
FROM node:20-alpine AS frontend-builder
ENV NODE_ENV production

# Set working directory
WORKDIR /app/frontend

# Copy frontend code and dependencies
COPY frontend/package*.json ./
COPY frontend/ ./

# Install dependencies and build the frontend
RUN npm install && npm run build

# Stage 2: Set up backend
FROM bellsoft/liberica-openjdk-debian:17 AS backend-builder

# Set working directory for backend
WORKDIR /app/backend



# !! USER - НАДО убедиться, что работают не под рутом (дефолт)



# Copy the backend jar file
COPY backend/build/output-docker/aws.jar .

# Stage 3: Combine frontend and backend into one image
FROM nginx:alpine

# Install Java and gettext for envsubst in the final stage
RUN apk add openjdk17-jre gettext

# Copy built frontend assets from frontend-builder
COPY --from=frontend-builder /app/frontend/build /usr/share/nginx/html

# Copy nginx configuration template
COPY nginx.conf /etc/nginx/conf.d/default.conf.template

# Copy backend jar to the final image
COPY --from=backend-builder /app/backend/aws.jar /app/backend/

# Expose frontend port (nginx)
EXPOSE 3000

# Expose backend port
EXPOSE 8080

# Add a shell script to start both nginx and the backend
COPY start.sh /start.sh
RUN chmod +x /start.sh

# Use envsubst to substitute the environment variable in nginx.conf at runtime, then start Nginx and the backend
CMD envsubst '${REACT_APP_BASE_URL}' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && /start.sh
